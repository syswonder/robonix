from robonix.uapi.specs.skill_specs import EntityPath
from robonix.uapi.runtime.action import action, EOS_TYPE_ActionResult, get_runtime, action_print


@action
def test_ranger_pointcloud(ranger_path: EntityPath, server_pc_path: EntityPath) -> EOS_TYPE_ActionResult:
    ranger = get_runtime().get_graph().get_entity_by_path(ranger_path)

    action_print(f"ranger: {ranger}")
    
    # test cap_pointcloud_to_file
    result = ranger.cap_pointcloud_to_file(
        filename="./examples/demo2/pointcloud.ply")
    if not result["success"]:
        action_print("failed to save pointcloud to file")
        return EOS_TYPE_ActionResult.FAILURE
    action_print(f"pointcloud saved to file: success={result['success']}, points_collected={result['points_collected']}")

    model_bytes = open("./examples/demo2/pointcloud.ply", "rb").read()

    # then use skl_spatiallm_detect to detect the object
    server_pc = get_runtime().get_graph().get_entity_by_path(server_pc_path)
    
    result = server_pc.skl_spatiallm_detect(ply_model=model_bytes)
    # gRPC returns SpatialLMDetectReply object, not a dict
    action_print(f"object detected: {result}")
    action_print(f"result type: {type(result)}")
    action_print(f"result attributes: {dir(result)}")
    
    # Convert spatiallm results to world coordinates
    spatiallm_txt = result.txt
    world_result = ranger.skl_spatiallm_to_world_pose(spatiallm_txt=spatiallm_txt)
    
    action_print(f"converted to world coordinates:")
    action_print(f"  robot pose: {world_result.robot_pose}")
    action_print(f"  detected {len(world_result.walls)} walls")
    action_print(f"  detected {len(world_result.doors)} doors")
    action_print(f"  detected {len(world_result.windows)} windows")
    action_print(f"  detected {len(world_result.bboxes)} bboxes")
    
    # Print some example world coordinates
    if world_result.walls:
        wall = world_result.walls[0]
        action_print(f"  example wall {wall.id}: world center at ({wall.world_center_x:.3f}, {wall.world_center_y:.3f}, {wall.world_center_z:.3f})")
    
    if world_result.bboxes:
        bbox = world_result.bboxes[0]
        action_print(f"  example bbox {bbox.id} ({bbox.class_name}): world center at ({bbox.world_center_x:.3f}, {bbox.world_center_y:.3f}, {bbox.world_center_z:.3f})")

    return EOS_TYPE_ActionResult.SUCCESS
